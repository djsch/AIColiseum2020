Daniel Schneider

This is code written for AIC2020, an internation AI competition hosted each year at coliseum.ai. I entered this competition as a way to exercise my skills and hopefully learn something new about AI, which I have little formal training in. Unfortunately, I did not have as much time as I wanted to dedicate to the competition, so I did not place particularly well, but I am archiving my code here as part of my github portfolio.

Anybody wishing to test my code can download the support code for the competition at https://coliseum.ai/. Documentation regarding usage of the support code can also be found there; but in brief, replace the stencil code in /src with my code found here, run the code using the 'run' option in the build.xml file, and upload the resulting .txt game file to the game viewer, also at https://coliseum.ai/, to see the results of the game.

A brief explanation of my thought process when approaching this problem: 

First, I spent some time thinking about the order in which units should be constructed. I implemented a couple different approaches to this problem. One was to hardcode an order for the first few units to be built. It was clear to me that we needed to create some sort of an economy quickly, so we needed a worker, and that we also needed a quick defense against early spawning zombies. I experiemented with several initial build orders to find the best results. Then I implemented a system where we attempted to build units in a particular ratio. For every X soldiers we built, we would build Y fumigators and Z workers, for instance. These parameters also could be changed to determine the optimal ratio.

Extentions to this approach could be to alter these ratios over the course of the game. It is likely that it is important to build workers early in the game and much less important to build them later, and the inverse is true of soldiers. These ratios could be altered dynamically over the course of the game based on what we observe -- for instance, if we see enemy soldiers we will want to ramp up our soldier production as well.

I also spent time working on the movement for most units. Soldiers started with a default AI that tried to stop them in a location when they couldn't see any other soldiers within a given distance, so that over time Soldiers would form a spread out network able to repel invaders. I made some alterations to this AI but ultimately kept the basics of the idea. One major change was to have soldiers run away from zombies as they approached, as soldiers could become overwhelmed by zombies before they could be killed. If they did this, they attempted to return to their post after the zombies were dead, and after the squares were fumigated.

Movement for fumigators was trickier. I initially had them wander randomly, but only within a specified radius of the base. This radius would increase over time. I reasoned that the area near the base was relatively safe and we could keep this area fumigated for my units. I quickly found out that this approach was not sufficient -- a single infected unit could cause the disease to spread almost immediately throughout my base and completely destroy my units. My next approach used the shared array to allow units to communicate to each other whenever they caught sight of an enemy and mark the squares around it as infected. Fumigators would then congregate on that square to fumigate it and then mark it safe again. 

This approach was much more successful, though not perfect. Fumigators often congregate in similar areas because they are targeting different, though very near to each other, squares. A better implementation would batch nearby squares together so that fumigators could better share work. I also do not have particularly good pathfinding -- the implementation works fine in a wide open field, but I have no good solution for obstacles. I considered implementing a basic Dijsktra's algorithm, but worried that it would become energy capped and that fumigator performance would suffer. Ultimately, there's no good way to know if that's the case without testing it, so I would try that first and see how it worked. I could also perhaps calculate a few routes between points at the start of the game and store them for easy access later.

Workers perform a simple hardcoded strategy where they find a valid space with no building or unit around them and construct a market and 8 farms, where they stop moving for the rest of the game and simply harvest from farms and deposit the goods at markets, to maximize toilet paper production.

This approach is fine, but could be even better. One worker can actually support more farms in a single marketplace. I'm not sure the exact number or configuration to do that, but it's certainly more than 8.

There are many more features that could be implemented into my AI given more time, but this should hopefully give you a good overview of my train of thought while approaching this problem, and where I was looking to improve at the end of the competition.